@use '~@ht6/react-ui/dist/styles/mixins.module';
@use '~@ht6/react-ui/dist/styles/colors.module';
@use '../../styles/mixins.module' as localMixins;
@use '../../styles/vars.module';

.section {
  max-width: map-get(vars.$widths, form) * 0.7;
  grid-template-columns: repeat(2, 1fr);
  grid-gap: 1.5rem;
  margin: 0 auto;
  display: grid;
  border: none;
  padding: 0;

  & > * {
    margin-bottom: auto;
  }

  @include localMixins.media(tablet) {
    grid-template-columns: 1fr;
  }
}

.field {
  &--full-width {
    grid-column-end: 2 span;

    @include localMixins.media(tablet) {
      grid-column-end: 1 span;
    }
  }

  &--break {
    grid-column-start: 1;
  }
}

.items {
  grid-template-columns: 1fr;
  list-style-type: none;
  grid-gap: 0.75rem;
  display: grid;
  padding: 0;
  margin: 0;
}

.link {
  @include mixins.transition(color);
  color: colors.getColor(warning-400);
  text-decoration: none;

  &:hover,
  &:focus {
    color: colors.getColor(warning-400, hover);
  }

  &:active {
    color: colors.getColor(warning-400, active);
  }
}

.field{
    label:has(+ input:disabled){
        opacity: 0.3799999952316284;
    }
    input{
        border: none;
        background-color: colors.getColor(neutral-400, null, 0.18);
        color: colors.getColor(neutral-400);
        &:disabled{
            background-color: colors.getColor(neutral-50, null, 0.08);
            color: colors.getColor(neutral-50, null, 0.38);
        }
        &:focus{
            color: colors.getColor(shades-100);
        }
    }
}

.dropdown{
    select ~ div{
        border: none;
        > button{
            position: absolute;
            border-radius: 4rem;
            background-color: colors.getColor(neutral-400, null, 0.18);
            color: colors.getColor(neutral-400, null, 0.7);
            > svg{
                color: colors.getColor(neutral-200);
            }
            &:focus{
                background-color: colors.getColor(shades-0);
                span{
                    color: colors.getColor(shades-100);
                }
            }
        }
        ul{
            border-radius: 1.5rem;
            background-color: colors.getColor(shades-0, null);
            color: colors.getColor(shades-100);
            &::before{
                content: "";
                display: block;
                height: 3rem;
                width: 100%;
            }
        }
        span, button{
            font-size: 0.875rem;
            letter-spacing: .0109375rem;
            font-weight: 400;
            line-height: 1.5rem;
        }
        button{
            padding: 0.75rem;
        }
    }
}

.searchDropdown{
    > div{
        height: 3rem;
    }
    div {
        border: none;
        input {
            position: absolute;
            border: none;
            border-radius: 4rem;
            background-color: colors.getColor(neutral-400, null, 0.18);
            color: colors.getColor(neutral-400, null, 0.7);
            padding: 0.75rem;
            &:focus{
                background-color: colors.getColor(shades-0);
                color: colors.getColor(shades-100);
            }
        }
        input ~ svg{
            margin-top: 1rem;
            color: colors.getColor(neutral-200);
        }
        ul{
            border-radius: 1.5rem;
            background-color: colors.getColor(shades-0, null);
            color: colors.getColor(shades-100);
            &::before{
                content: "";
                display: block;
                height: 3rem;
                width: 100%;
            }
        }
        input, button{
            font-size: 0.875rem;
            letter-spacing: .0109375rem;
            font-weight: 400;
            line-height: 1.5rem;
        }
    }
}

.textarea{
    margin-top: -1rem;
    textarea{
        border: none;
        border-radius: 1.25rem;
        background-color: colors.getColor(neutral-50, null, 0.18);

        color: colors.getColor(neutral-50);

        &:focus{
            color: colors.getColor(shades-100);
        }
    }
    span{
      color: colors.getColor(shades-0);
    }
}

.fileUpload{
  > div{
    background-color: colors.getColor(neutral-400, null, 0.18);
    color: colors.getColor(shades-0);
    &:hover{
      background-color: colors.getColor(shades-0);
      color: colors.getColor(shades-100);
      p {
        color: colors.getColor(shades-100);
      }
    }
    p {
      color: colors.getColor(shades-0);
      span{
        color: colors.getColor(warning-400);
      }
    }
  }
}
