@use '~@ht6/react-ui/dist/styles/colors.module';
@use '~@ht6/react-ui/dist/styles/mixins.module';
@use 'sass:math';

$_width: 10rem;
$_height: 4.5rem;

%cell {
  grid-column: var(--c) / var(--cs, 1) span;
  grid-row: var(--r) / var(--rs, 1) span;
}

// Event Stuff
.event {
  @extend %cell;
  box-sizing: border-box;
  position: relative;
  padding: 0.25rem;
  height: $_height;
  z-index: 2;
}

.box {
  border-left: 0.25rem solid rgb(var(--a));
  border-bottom-right-radius: 0.5rem;
  border-top-right-radius: 0.5rem;
  background-color: rgb(var(--b));
  height: 100%;
}

// Category Label Stuff
.label {
  @extend %cell;
  height: calc($_height + 1px);
  background-color: white;
  box-sizing: border-box;
  padding: 1.5rem 0.5rem;
  align-items: center;
  position: sticky;
  display: flex;
  z-index: 5;
  left: 0;
}

.accent {
  background-color: rgb(var(--a));
  margin-right: 0.625rem;
  border-radius: 999px;
  min-width: 0.25rem;
  height: 1.5rem;
}

// Date label stuff
.day {
  @extend %cell;
  background-color: white;
  left: calc($_width + 1px);
  padding: 0 1rem 0.25rem;
  box-sizing: border-box;
  position: sticky;
  width: 100%;
}

.hour {
  @extend %cell;
  padding: 0 1rem 0.825rem;
  box-sizing: border-box;
  position: relative;
  width: 100%;
}

// Misc stuff
.root {
  grid-template-rows: max-content max-content 1px repeat(var(--rows), $_height 1px);
  grid-template-columns: $_width 1px repeat(var(--cols), math.div($_width, 2) math.div($_width, 2));
  overflow: auto;
  display: grid;
}

.line {
  @extend %cell;
  background-color: colors.getColor(primary-200, $alpha: 0.8);
  z-index: 1;
}

.cover {
  @extend %cell;
  background-color: white;
  position: sticky;
  z-index: 5;
  left: 0;
}

.hline {
  z-index: 3;
}

.vline {
  height: calc((var(--rows) + 0.5) * ($_height + 1px));
  inset: 0 auto auto 0;
  position: absolute;
  width: 1px;
  margin: 0;

  &.fixed {
    position: sticky;
    left: $_width;
    z-index: 2;
  }
}

.dline {
  height: calc((var(--rows) + 1) * $_height);
}

.now {
  @extend %cell;
  @include mixins.transition(transform);
  transform: translateX(calc(var(--p) * $_width));
  background-color: colors.getColor(error-500);
  position: relative;
  width: 0.25rem;
  height: 100%;
  z-index: 4;

  &::before {
    background-color: colors.getColor(error-500);
    inset: -0.375rem -0.25rem auto auto;
    border-radius: 999px;
    position: absolute;
    height: 0.75rem;
    width: 0.75rem;
    content: '';
  }
}